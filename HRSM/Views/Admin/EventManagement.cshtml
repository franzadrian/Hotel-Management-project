@model List<HRSM.Models.Event>
@{
    ViewData["Title"] = "Event Management";
    Layout = "_AdminLayout";
}

<div class="content-wrapper">
    <div class="header-actions">
        <button class="btn btn-info" onclick="showPageTitleModal()">
            <i class="fas fa-heading"></i> Change Page Title
        </button>
        <button class="btn btn-primary" onclick="showAddEventModal()">
            <i class="fas fa-plus"></i> Add New Event
        </button>
    </div>

    <div class="table-container">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Title</th>
                        <th>Location</th>
                        <th>Description</th>
                        <th>Date</th>
                        <th>Participants</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="eventsTableBody">
                    @if (Model != null && Model.Any())
                    {
                        foreach (var evt in Model)
                        {
                            <tr data-id="@evt.EventId">
                                <td>@evt.DisplayOrder</td>
                                <td>@evt.Title</td>
                                <td>@evt.Location</td>
                                <td>@evt.Description</td>
                                <td>@evt.EventDate</td>
                                <td>@evt.Participants</td>
                                <td>
                                    @if (evt.IsActive)
                                    {
                                        <span class="badge badge-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-secondary">Inactive</span>
                                    }
                                </td>
                                <td>
                                    <div class="actions">
                                        <button class="btn btn-info action-btn" onclick="editEvent('@evt.EventId')">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-danger action-btn" onclick="deleteEvent('@evt.EventId')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center">No events found. Add some events!</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add/Edit Event Modal -->
<div id="eventModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2 id="modalTitle" class="form-title">Add New Event</h2>
        
        <form id="eventForm" enctype="multipart/form-data">
            <input type="hidden" id="eventId" name="eventId" value="0">
            
            <div class="form-row">
                <div class="form-group col-6">
                    <label for="title">Title</label>
                    <input type="text" id="title" name="title" class="form-control" required>
                </div>
                
                <div class="form-group col-6">
                    <label for="location">Location</label>
                    <input type="text" id="location" name="location" class="form-control" required>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group col-6">
                    <label for="eventDate">Date</label>
                    <input type="date" id="eventDate" name="eventDate" class="form-control" required>
                    <small class="text-muted">Select a date for the event (YYYY-MM-DD)</small>
                </div>
                
                <div class="form-group col-6">
                    <label for="participants">Participants</label>
                    <input type="text" id="participants" name="participants" class="form-control" required>
                </div>
            </div>
            
            <div class="form-group">
                <label for="description">Description</label>
                <input type="text" id="description" name="description" class="form-control" required>
            </div>
            
            <div class="form-row">
                <div class="form-group col-6">
                    <label for="eventImage">Event Image</label>
                    <input type="file" id="eventImage" name="eventImage" class="form-control" accept="image/*">
                    <small class="text-muted">Upload a new image or leave empty to keep the current one.</small>
                </div>
                
                <div class="form-group col-6">
                    <label for="displayOrder">Display Order</label>
                    <input type="number" id="displayOrder" name="displayOrder" class="form-control" required min="1">
                </div>
            </div>
            
            <div class="form-group">
                <label for="note">Note (Optional)</label>
                <input type="text" id="note" name="note" class="form-control">
            </div>
            
            <div class="form-group">
                <label>Status</label>
                <div>
                    <label class="radio-inline">
                        <input type="radio" name="isActive" value="true" checked> Active
                    </label>
                    &nbsp;&nbsp;
                    <label class="radio-inline">
                        <input type="radio" name="isActive" value="false"> Inactive
                    </label>
                </div>
            </div>
            
            <div style="display: flex; justify-content: flex-end; gap: 1rem; margin-top: 1.5rem;">
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                <button type="submit" class="btn btn-primary">Save Event</button>
            </div>
        </form>
    </div>
</div>

<!-- Page Title Modal -->
<div id="pageTitleModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closePageTitleModal()">&times;</span>
        <h2 class="form-title">Change Events Page Title</h2>
        
        <form id="pageTitleForm">
            <div class="form-group">
                <label for="pageTitle">Page Title</label>
                <input type="text" id="pageTitle" name="pageTitle" class="form-control" required>
                <small>This will change the title shown at the top of the Events page.</small>
            </div>
            
            <div style="display: flex; justify-content: flex-end; gap: 1rem; margin-top: 1.5rem;">
                <button type="button" class="btn btn-secondary" onclick="closePageTitleModal()">Cancel</button>
                <button type="submit" class="btn btn-primary">Save Title</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
<script>
    // Get event by ID to edit
    function getEvent(id, callback) {
        fetch(`/api/Event/${id}`)
            .then(response => response.json())
            .then(data => {
                callback(data);
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to fetch event details');
            });
    }
    
    function showAddEventModal() {
        // Reset form
        document.getElementById('eventForm').reset();
        document.getElementById('eventId').value = '0';
        document.getElementById('modalTitle').innerText = 'Add New Event';
        
        // Set default values
        document.getElementById('displayOrder').value = document.querySelectorAll('#eventsTableBody tr').length + 1;
        document.querySelector('input[name="isActive"][value="true"]').checked = true;
        
        // Set default date to today (using the local date to avoid timezone issues)
        const now = new Date();
        const year = now.getFullYear();
        const month = (now.getMonth() + 1).toString().padStart(2, '0');
        const day = now.getDate().toString().padStart(2, '0');
        const today = `${year}-${month}-${day}`;
        document.getElementById('eventDate').value = today;
        
        // Initialize other fields with default values to prevent null/undefined errors
        document.getElementById('title').value = '';
        document.getElementById('location').value = '';
        document.getElementById('description').value = '';
        document.getElementById('participants').value = '';
        document.getElementById('note').value = '';
        
        // Show modal
        document.getElementById('eventModal').style.display = 'flex';
    }
    
    function editEvent(eventId) {
        // Get event details from API
        console.log('Editing event with ID:', eventId);
        
        getEvent(eventId, function(event) {
            console.log('Received event data:', event);
            
            // Fill form
            document.getElementById('eventId').value = event.eventId;
            document.getElementById('title').value = event.title;
            document.getElementById('location').value = event.location;
            document.getElementById('description').value = event.description;
            
            // Format date for input field - improved handling
            if (event.eventDate) {
                console.log('Original event date from server:', event.eventDate);
                
                try {
                    // Try different date parsing approaches
                    let dateForInput = '';
                    let dateObj;
                    
                    // First, check if it's already in YYYY-MM-DD format
                    if (/^\d{4}-\d{2}-\d{2}$/.test(event.eventDate)) {
                        // Already in the right format
                        dateForInput = event.eventDate;
                        console.log('Date is already in YYYY-MM-DD format:', dateForInput);
                    } 
                    // Check if it's in "Month Day, Year" format (like "January 1, 2023")
                    else if (/[a-zA-Z]+ \d{1,2}, \d{4}/.test(event.eventDate)) {
                        dateObj = new Date(event.eventDate);
                        if (!isNaN(dateObj.getTime())) {
                            // Use UTC methods to avoid timezone issues
                            const year = dateObj.getUTCFullYear();
                            const month = (dateObj.getUTCMonth() + 1).toString().padStart(2, '0');
                            const day = dateObj.getUTCDate().toString().padStart(2, '0');
                            dateForInput = `${year}-${month}-${day}`;
                            console.log('Parsed from "Month Day, Year" format with UTC methods:', dateForInput);
                        }
                    }
                    // Otherwise try standard parsing
                    else {
                        dateObj = new Date(event.eventDate);
                        if (!isNaN(dateObj.getTime())) {
                            // Use UTC methods to avoid timezone issues
                            const year = dateObj.getUTCFullYear();
                            const month = (dateObj.getUTCMonth() + 1).toString().padStart(2, '0');
                            const day = dateObj.getUTCDate().toString().padStart(2, '0');
                            dateForInput = `${year}-${month}-${day}`;
                            console.log('Parsed with standard Date parsing and UTC methods:', dateForInput);
                        } else {
                            // Parse date parts manually
                            console.log('Trying manual date parsing');
                            const parts = event.eventDate.split(/[-\/\.]/);
                            if (parts.length === 3) {
                                // Try to determine format based on part sizes
                                // Assume the format with 4-digit number is the year
                                let year, month, day;
                                
                                for (let i = 0; i < 3; i++) {
                                    if (parts[i].length === 4) {
                                        // This is likely the year
                                        year = parseInt(parts[i]);
                                        // Determine if month/day are before or after
                                        if (i === 0) {
                                            // Year is first (YYYY-MM-DD)
                                            month = parseInt(parts[1]) - 1;
                                            day = parseInt(parts[2]);
                                        } else if (i === 2) {
                                            // Year is last (MM-DD-YYYY or DD-MM-YYYY)
                                            // Assume month is first for now
                                            month = parseInt(parts[0]) - 1;
                                            day = parseInt(parts[1]);
                                        } else {
                                            // Year is in the middle (unlikely but handle it)
                                            month = parseInt(parts[0]) - 1;
                                            day = parseInt(parts[2]);
                                        }
                                        break;
                                    }
                                }
                                
                                if (year && !isNaN(month) && !isNaN(day)) {
                                    dateObj = new Date(year, month, day);
                                    if (!isNaN(dateObj.getTime())) {
                                        // Use direct string creation instead of dateObj.toISOString()
                                        // to avoid timezone issues
                                        // Note: month is 0-based in the Date constructor, so add 1
                                        const formattedMonth = (month + 1).toString().padStart(2, '0');
                                        const formattedDay = day.toString().padStart(2, '0');
                                        dateForInput = `${year}-${formattedMonth}-${formattedDay}`;
                                        console.log('Parsed with manual parts using direct formatting:', dateForInput);
                                    }
                                }
                            }
                        }
                    }
                    
                    // Use the parsed date or fall back to original
                    if (dateForInput) {
                        document.getElementById('eventDate').value = dateForInput;
                    } else {
                        console.warn('Could not parse date, using original value:', event.eventDate);
                        document.getElementById('eventDate').value = event.eventDate;
                    }
                } catch (err) {
                    console.error('Error parsing event date:', err);
                    // If parsing fails, use the raw value
                    document.getElementById('eventDate').value = event.eventDate;
                }
            } else {
                // Set default date to today if no date provided
                const now = new Date();
                const year = now.getFullYear();
                const month = (now.getMonth() + 1).toString().padStart(2, '0');
                const day = now.getDate().toString().padStart(2, '0');
                const today = `${year}-${month}-${day}`;
                console.log('No date provided, using today:', today);
                document.getElementById('eventDate').value = today;
            }
            
            document.getElementById('participants').value = event.participants;
            document.getElementById('note').value = event.note || '';
            document.getElementById('displayOrder').value = event.displayOrder;
            
            // Set status
            document.querySelector(`input[name="isActive"][value="${event.isActive}"]`).checked = true;
            
            // Update modal title
            document.getElementById('modalTitle').innerText = 'Edit Event';
            
            // Show modal
            document.getElementById('eventModal').style.display = 'flex';
        });
    }
    
    function closeModal() {
        document.getElementById('eventModal').style.display = 'none';
    }
    
    function showPageTitleModal() {
        // Get the current title from various sources
        let currentTitle = '';
        
        // First check if we already have it from the server
        const serverTitle = '@ViewBag.EventPageTitle';
        if (serverTitle && serverTitle !== '') {
            currentTitle = serverTitle;
        }
        
        // Then try localStorage
        if (!currentTitle) {
            const localTitle = localStorage.getItem('eventPageTitle');
            if (localTitle) {
                currentTitle = localTitle;
            }
        }
        
        // Then try sessionStorage
        if (!currentTitle) {
            const sessionTitle = sessionStorage.getItem('eventPageTitle');
            if (sessionTitle) {
                currentTitle = sessionTitle;
            }
        }
        
        // Then try cookies
        if (!currentTitle) {
            const cookie = document.cookie.split('; ').find(row => row.startsWith('EventPageTitle='));
            if (cookie) {
                currentTitle = cookie.split('=')[1];
            }
        }
        
        // If all else fails, fetch from API
        if (!currentTitle) {
            fetch('/api/Event/getCurrentTitle')
                .then(response => response.json())
                .then(data => {
                    if (data.title) {
                        document.getElementById('pageTitle').value = data.title;
                    }
                })
                .catch(error => {
                    console.error('Error fetching current title:', error);
                });
        } else {
            // Set the input value to the current title
            document.getElementById('pageTitle').value = currentTitle;
        }
        
        // Show the modal
        document.getElementById('pageTitleModal').style.display = 'flex';
    }
    
    function closePageTitleModal() {
        document.getElementById('pageTitleModal').style.display = 'none';
    }
    
    function deleteEvent(eventId) {
        if (confirm('Are you sure you want to delete this event?')) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            fetch(`/api/Event/${eventId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Event deleted successfully!');
                    location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred. Please try again.');
            });
        }
    }
    
    // Form submission
    document.getElementById('eventForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        try {
            // Basic validation
            const title = document.getElementById('title').value;
            const location = document.getElementById('location').value;
            const description = document.getElementById('description').value;
            const eventDate = document.getElementById('eventDate').value;
            const participants = document.getElementById('participants').value;
            
            // Check required fields
            if (!title || !location || !description || !eventDate || !participants) {
                alert('Please fill in all required fields (Title, Location, Description, Date, and Participants)');
                return;
            }
            
            const eventId = parseInt(document.getElementById('eventId').value);
            const isNewEvent = eventId === 0;
            
            // Format the event date - improved handling
            const rawDate = document.getElementById('eventDate').value;
            let formattedDate = rawDate;
            
            console.log('Raw date input:', rawDate);
            
            if (rawDate) {
                try {
                    // Parse the date, ensuring timezone doesn't interfere
                    // For a date input field value like "2023-05-15", we need to handle it correctly
                    const parts = rawDate.split('-');
                    if (parts.length === 3) {
                        // If it's a standard YYYY-MM-DD format from the date input field
                        const year = parseInt(parts[0]);
                        const month = parseInt(parts[1]) - 1; // JavaScript months are 0-indexed
                        const day = parseInt(parts[2]);
                        
                        if (!isNaN(year) && !isNaN(month) && !isNaN(day)) {
                            // Use UTC date to avoid timezone issues
                            // Note: month is already adjusted (0-based)
                            formattedDate = `${year}-${(month+1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
                            console.log('Formatted date with direct string manipulation:', formattedDate);
                        } else {
                            console.warn('Could not parse date parts as numbers:', parts);
                        }
                    } else {
                        // Try regular parsing for other formats
                        const dateObj = new Date(rawDate);
                        if (!isNaN(dateObj.getTime())) {
                            // Handle timezone issues by using UTC methods
                            const year = dateObj.getUTCFullYear();
                            const month = (dateObj.getUTCMonth() + 1).toString().padStart(2, '0'); // getUTCMonth is 0-indexed
                            const day = dateObj.getUTCDate().toString().padStart(2, '0');
                            formattedDate = `${year}-${month}-${day}`;
                            console.log('Formatted date (alternative, using UTC):', formattedDate);
                        } else {
                            console.warn('Invalid date format, using original input:', rawDate);
                        }
                    }
                } catch (err) {
                    console.error('Error formatting date:', err);
                    // Keep the original value if there's an error
                }
            } else {
                // If date is empty, use today's date
                const now = new Date();
                const year = now.getFullYear();
                const month = (now.getMonth() + 1).toString().padStart(2, '0');
                const day = now.getDate().toString().padStart(2, '0');
                formattedDate = `${year}-${month}-${day}`;
                console.log('Using default date (today):', formattedDate);
            }
            
            // Create FormData object to handle files
            const formData = new FormData();
            
            // Add form fields to FormData
            formData.append('eventId', eventId.toString());
            formData.append('title', document.getElementById('title').value);
            formData.append('location', document.getElementById('location').value);
            formData.append('description', document.getElementById('description').value);
            formData.append('eventDate', formattedDate);
            formData.append('participants', document.getElementById('participants').value);
            formData.append('note', document.getElementById('note').value || '');
            formData.append('displayOrder', document.getElementById('displayOrder').value);
            
            const activeValue = document.querySelector('input[name="isActive"]:checked').value;
            formData.append('isActive', activeValue);
            
            // Log form data for debugging
            console.log('Form data being submitted:');
            for (let pair of formData.entries()) {
                console.log(pair[0] + ': ' + pair[1]);
            }
            
            // Add file if selected
            const fileInput = document.getElementById('eventImage');
            if (fileInput.files && fileInput.files[0]) {
                formData.append('eventImage', fileInput.files[0]);
                console.log('Adding file to form data:', fileInput.files[0].name);
            } else {
                // For existing events without updating the image, we need to make sure
                // the server sees the eventImage parameter is there even if it's empty
                if (!isNewEvent) {
                    console.log('No new file selected, adding empty placeholder for existing event');
                    // Add an empty field just to satisfy the form validation
                    formData.append('eventImage', new Blob([]), '');  // Empty blob as placeholder
                }
            }
            
            // Get antiforgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            // API endpoint based on whether adding or updating
            const url = isNewEvent ? '/api/Event/upload' : `/api/Event/upload/${eventId}`;
            console.log('Submitting to URL:', url);
            
            // Submit the data
            fetch(url, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token
                },
                body: formData
            })
            .then(async response => {
                console.log('Response status:', response.status, response.statusText);
                
                // Even if we get an error, try to parse the response
                const responseText = await response.text();
                console.log('Raw response:', responseText);
                
                // Try to parse as JSON
                let data;
                try {
                    data = JSON.parse(responseText);
                    console.log('Parsed response data:', data);
                } catch (err) {
                    console.error('Error parsing response as JSON:', err);
                    // If we can't parse as JSON, still throw the error for the status
                    if (!response.ok) {
                        throw new Error(`Server error: ${response.status} ${response.statusText}\nResponse: ${responseText}`);
                    }
                    return { success: false, message: 'Invalid response format' };
                }
                
                // If we parsed successfully but status wasn't ok, still throw with the parsed error info
                if (!response.ok) {
                    if (data && data.message) {
                        throw new Error(`Server error: ${response.status} ${response.statusText}\nMessage: ${data.message}`);
                    } else {
                        throw new Error(`Server error: ${response.status} ${response.statusText}`);
                    }
                }
                
                return data;
            })
            .then(data => {
                console.log('Server response data:', data);
                if (data.success || (isNewEvent && data.eventId)) {
                    alert(isNewEvent ? 'Event added successfully!' : 'Event updated successfully!');
                    window.location.reload();
                } else {
                    alert('Error: ' + (data.message || 'Unknown error occurred'));
                }
            })
            .catch(error => {
                console.error('Error during form submission:', error);
                alert('An error occurred while saving the event: ' + error.message);
            });
        } catch (err) {
            console.error('Exception in form submission handler:', err);
            alert('An unexpected error occurred: ' + err.message);
        }
    });
    
    // Page title form submission
    document.getElementById('pageTitleForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const pageTitle = document.getElementById('pageTitle').value;
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        
        fetch('/api/Event/pageTitle', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({ pageTitle: pageTitle })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Store the title in sessionStorage for other pages to use
                sessionStorage.setItem('eventPageTitle', pageTitle);
                
                // Also store in localStorage (permanent storage)
                localStorage.setItem('eventPageTitle', pageTitle);
                
                // Create and store a cookie as fallback
                document.cookie = `EventPageTitle=${pageTitle}; path=/; max-age=31536000`;
                
                // Broadcast message for any open event tabs
                try {
                    // Broadcast message to all tabs
                    window.postMessage(
                        { 
                            type: 'updateEventTitle',
                            title: pageTitle
                        }, 
                        window.location.origin
                    );
                } catch (err) {
                    console.log('Could not communicate with events page:', err);
                }
                
                alert('Page title updated successfully!');
                closePageTitleModal();
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred. Please try again.');
        });
    });
    
    // Close the modal when clicking outside of it
    window.addEventListener('click', function(event) {
        const eventModal = document.getElementById('eventModal');
        const pageTitleModal = document.getElementById('pageTitleModal');
        
        if (event.target === eventModal) {
            closeModal();
        } else if (event.target === pageTitleModal) {
            closePageTitleModal();
        }
    });
</script>
}

@section Styles {
<style>
    /* Add a left-aligned wrapper for all content */
    .content-wrapper {
        width: 100%;
        max-width: 100%;
        margin: 0;
        padding: 0;
    }
    
    .header-actions {
        display: flex;
        gap: 10px;
        margin-bottom: 1.5rem;
        justify-content: flex-start;
    }
    
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        align-items: center;
        justify-content: center;
        overflow-y: auto;
    }

    .modal-content {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        max-width: 800px;
        width: 90%;
        max-height: 85vh;
        overflow-y: auto;
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        position: relative;
        animation: fadeIn 0.3s;
        margin: 30px auto;
    }
    
    .table-container {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 1.5rem;
        margin-bottom: 2rem;
        width: 100%;
        max-width: 100%;
        overflow: hidden;
    }
    
    .table-responsive {
        width: 100%;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
    
    .table {
        width: 100%;
        border-collapse: collapse;
        margin: 0;
    }
    
    .table th,
    .table td {
        padding: 0.75rem;
        vertical-align: top;
        border-top: 1px solid #dee2e6;
        text-align: left;
    }
    
    .table thead th {
        vertical-align: bottom;
        border-bottom: 2px solid #dee2e6;
        background-color: #f8f9fa;
    }
    
    .badge {
        display: inline-block;
        padding: 0.25em 0.6em;
        font-size: 75%;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }
    
    .badge-success {
        color: #fff;
        background-color: #28a745;
    }
    
    .badge-secondary {
        color: #fff;
        background-color: #6c757d;
    }

    /* Form row layout */
    .form-row {
        display: flex;
        flex-wrap: wrap;
        margin-right: -10px;
        margin-left: -10px;
    }

    .form-row > .form-group {
        padding-right: 10px;
        padding-left: 10px;
    }

    .col-6 {
        flex: 0 0 50%;
        max-width: 50%;
    }

    .radio-inline {
        display: inline-flex;
        align-items: center;
        margin-right: 1rem;
    }

    /* Action buttons */
    .actions {
        display: flex;
        gap: 5px;
    }
    
    .action-btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    /* Responsive adjustments */
    @@media (max-width: 992px) {
        .table th, .table td {
            padding: 0.5rem;
            font-size: 0.9rem;
        }
    }
    
    @@media (max-width: 768px) {
        .col-6 {
            flex: 0 0 100%;
            max-width: 100%;
        }
        
        .modal-content {
            width: 95%;
            padding: 1.5rem;
            margin: 20px auto;
        }
        
        .actions {
            flex-direction: column;
            gap: 3px;
        }
    }
    
    /* Close button styling */
    .close {
        position: absolute;
        top: 15px;
        right: 15px;
        font-size: 24px;
        cursor: pointer;
    }
</style>
}

@model List<HRSM.Models.Notification>
@{
    ViewData["Title"] = "Notifications";
}

<style>
    :root {
        --primary: #290909;
        --primary-light: #3a0d0d;
        --primary-dark: #1a0505;
        --accent: #d4a373;
        --accent-light: #e8c9a8;
        --text-light: #f8f8f8;
        --text-muted: #aaaaaa;
        --text-dark: #222222;
        --card-bg: #ffffff;
        --border: #e0e0e0;
        --success: #28a745;
        --danger: #dc3545;
        --warning: #ffc107;
        --info: #17a2b8;
        --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
        --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
        --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
        --radius-sm: 4px;
        --radius-md: 8px;
        --radius-lg: 12px;
        --transition: all 0.3s ease;
    }

    .notifications-container {
        max-width: 1000px;
        margin: 2rem auto;
        background-color: var(--card-bg);
        border-radius: var(--radius-md);
        box-shadow: var(--shadow-lg);
        overflow: hidden;
    }

    .notification-header {
        background-color: var(--primary);
        color: var(--text-light);
        padding: 1.5rem 2rem;
        border-radius: var(--radius-md) var(--radius-md) 0 0;
        position: relative;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .notification-header h2 {
        margin: 0;
        font-size: 1.8rem;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    .back-to-dashboard {
        background-color: var(--accent);
        color: var(--primary);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: var(--radius-sm);
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .back-to-dashboard:hover {
        background-color: var(--accent-light);
        transform: translateY(-2px);
    }

    .notification-header::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 3px;
        background: var(--accent);
    }

    .notification-actions-top {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 2rem;
        border-bottom: 1px solid var(--border);
    }

    .notification-count {
        color: var(--text-muted);
        font-size: 0.9rem;
    }

    .mark-all-read-btn {
        background-color: var(--accent);
        color: var(--primary);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: var(--radius-sm);
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .mark-all-read-btn:hover {
        background-color: var(--accent-light);
        transform: translateY(-2px);
    }

    .notification-empty {
        text-align: center;
        padding: 3rem 2rem;
        color: var(--text-muted);
        font-style: italic;
    }

    .notification-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .notification-item {
        display: flex;
        padding: 1.5rem 2rem;
        border-bottom: 1px solid var(--border);
        transition: var(--transition);
        position: relative;
    }

    .notification-item:hover {
        background-color: #f9f9f9;
    }

    .notification-item.unread {
        background-color: rgba(212, 163, 115, 0.1);
    }

    .notification-item.unread:hover {
        background-color: rgba(212, 163, 115, 0.2);
    }

    .notification-icon {
        margin-right: 1.5rem;
        color: var(--accent);
        font-size: 1.25rem;
        width: 20px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .notification-content {
        flex: 1;
    }

    .notification-message {
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
        line-height: 1.5;
        color: var(--text-dark);
    }

    .notification-date {
        color: var(--text-muted);
        font-size: 0.85rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .notification-date i {
        font-size: 0.8rem;
    }

    .notification-actions {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .mark-read-btn {
        background: none;
        border: none;
        color: var(--primary);
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: 500;
        transition: var(--transition);
        padding: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .mark-read-btn:hover {
        color: var(--accent);
    }

    .btn-navigate {
        color: var(--primary);
        background: none;
        border: none;
        cursor: pointer;
        transition: var(--transition);
        font-size: 1rem;
        padding: 0.5rem;
    }

    .btn-navigate:hover {
        color: var(--accent);
    }

    /* Pagination styles */
    .pagination-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1.5rem;
        border-top: 1px solid var(--border);
        gap: 0.5rem;
    }

    .pagination-button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #f5f5f5;
        color: var(--primary);
        border: 1px solid var(--border);
        cursor: pointer;
        transition: var(--transition);
    }

    .pagination-button:hover {
        background-color: var(--accent-light);
        transform: translateY(-2px);
    }

    .pagination-button.active {
        background-color: var(--primary);
        color: white;
    }

    .pagination-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        pointer-events: none;
    }

    .pagination-info {
        font-size: 0.9rem;
        color: var(--text-muted);
        text-align: center;
        margin-top: 0.5rem;
    }

    @@media (max-width: 768px) {
        .notifications-container {
            margin: 1rem;
        }

        .notification-header {
            padding: 1rem 1.5rem;
            flex-direction: column;
            gap: 1rem;
            align-items: flex-start;
        }

        .notification-actions-top {
            padding: 0.75rem 1.5rem;
            flex-direction: column;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .notification-item {
            padding: 1.25rem 1.5rem;
            flex-direction: column;
        }

        .notification-icon {
            margin-bottom: 0.75rem;
            margin-right: 0;
        }

        .notification-actions {
            margin-top: 1rem;
            justify-content: flex-start;
        }

        .pagination-container {
            flex-wrap: wrap;
        }
    }
</style>

<div class="notifications-container">
    <div class="notification-header">
        <h2>Notifications</h2>
        <a href="/Home/Home" class="back-to-dashboard">
            <i class="fas fa-chevron-left"></i> Back to Dashboard
        </a>
    </div>
    
    <div class="notification-actions-top">
        <span class="notification-count">@Model.Count notifications total Â· @Model.Count(n => !n.IsRead) unread</span>
        @if (Model.Any(n => !n.IsRead))
        {
            <button id="markAllReadBtn" class="mark-all-read-btn">
                <i class="fas fa-check"></i> Mark all as read
            </button>
        }
    </div>

    @if (!Model.Any())
    {
        <div class="notification-empty">
            <p>You don't have any notifications yet.</p>
        </div>
    }
    else
    {
        <ul class="notification-list" id="notificationList">
            @foreach (var notification in Model)
            {
                <li class="notification-item @(notification.IsRead ? "" : "unread")" data-id="@notification.Id" data-type="@notification.Type">
                    <div class="notification-icon">
                        <i class="@notification.Icon"></i>
                    </div>
                    <div class="notification-content">
                        <p class="notification-message">@notification.Message</p>
                        <div class="notification-date">
                            <i class="fas fa-clock"></i>
                            <span>@notification.CreatedAt.ToString("MMM dd, yyyy - HH:mm")</span>
                        </div>
                    </div>
                    <div class="notification-actions">
                        @if (!notification.IsRead)
                        {
                            <button class="mark-read-btn" data-id="@notification.Id">
                                <i class="fas fa-check"></i> Mark as read
                            </button>
                        }
                        @if (!string.IsNullOrEmpty(notification.RelatedUrl))
                        {
                            <a href="@notification.RelatedUrl" class="btn-navigate" title="View details">
                                <i class="fas fa-external-link-alt"></i>
                            </a>
                        }
                    </div>
                </li>
            }
        </ul>

        <!-- Pagination controls -->
        @if (Model.Count > 10)
        {
            <div class="pagination-container" id="paginationContainer">
                <button id="prevPage" class="pagination-button" disabled>
                    <i class="fas fa-chevron-left"></i>
                </button>
                <div id="paginationNumbers"></div>
                <button id="nextPage" class="pagination-button">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
            <div class="pagination-info" id="paginationInfo"></div>
        }
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const markAllReadBtn = document.getElementById('markAllReadBtn');
            const markReadBtns = document.querySelectorAll('.mark-read-btn');
            const notificationItems = document.querySelectorAll('.notification-item');
            
            // Setup pagination if there are notifications
            if (notificationItems.length > 0) {
                setupPagination();
            }
            
            // Format date function
            function formatDate(dateString) {
                const now = new Date();
                const date = new Date(dateString);
                const diffMs = now - date;
                const diffSec = Math.floor(diffMs / 1000);
                const diffMin = Math.floor(diffSec / 60);
                const diffHr = Math.floor(diffMin / 60);
                const diffDays = Math.floor(diffHr / 24);
                
                if (diffSec < 60) {
                    return 'just now';
                } else if (diffMin < 60) {
                    return `${diffMin} minute${diffMin > 1 ? 's' : ''} ago`;
                } else if (diffHr < 24) {
                    return `${diffHr} hour${diffHr > 1 ? 's' : ''} ago`;
                } else if (diffDays < 7) {
                    return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
                } else {
                    return date.toLocaleDateString();
                }
            }
            
            // Mark all notifications as read
            if (markAllReadBtn) {
                markAllReadBtn.addEventListener('click', function() {
                    fetch('/api/Notification/MarkAllAsRead', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update UI
                            document.querySelectorAll('.notification-item.unread').forEach(item => {
                                item.classList.remove('unread');
                            });
                            
                            // Remove all mark as read buttons
                            document.querySelectorAll('.mark-read-btn').forEach(btn => {
                                btn.remove();
                            });
                            
                            // Update notification count
                            const countElement = document.querySelector('.notification-count');
                            const totalCount = @Model.Count;
                            countElement.textContent = `${totalCount} notifications total Â· 0 unread`;
                            
                            // Hide Mark All as Read button
                            markAllReadBtn.style.display = 'none';
                        }
                    })
                    .catch(error => {
                        console.error('Error marking all notifications as read:', error);
                    });
                });
            }
            
            // Mark individual notification as read
            markReadBtns.forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation(); // Prevent item click event
                    const notificationId = this.dataset.id;
                    
                    fetch(`/api/Notification/${notificationId}/MarkAsRead`, {
                        method: 'POST'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update UI
                            const item = document.querySelector(`.notification-item[data-id="${notificationId}"]`);
                            item.classList.remove('unread');
                            this.remove();
                            
                            // Update unread count
                            const countElement = document.querySelector('.notification-count');
                            const currentText = countElement.textContent;
                            const unreadCountMatch = currentText.match(/(\d+) unread/);
                            if (unreadCountMatch && unreadCountMatch[1]) {
                                const unreadCount = parseInt(unreadCountMatch[1]) - 1;
                                const totalCount = @Model.Count;
                                countElement.textContent = `${totalCount} notifications total Â· ${unreadCount} unread`;
                                
                                // Hide Mark All as Read button if no more unread notifications
                                if (unreadCount === 0 && markAllReadBtn) {
                                    markAllReadBtn.style.display = 'none';
                                }
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error marking notification as read:', error);
                    });
                });
            });
            
            // Make notification items clickable to navigate to related URL
            notificationItems.forEach(item => {
                item.addEventListener('click', function(e) {
                    // Skip if clicking on a button
                    if (e.target.tagName === 'BUTTON' || e.target.closest('button') || e.target.tagName === 'A' || e.target.closest('a')) {
                        return;
                    }
                    
                    const notificationId = this.dataset.id;
                    const relatedUrl = this.querySelector('.btn-navigate')?.getAttribute('href');
                    
                    // If this is an unread notification, mark it as read
                    if (this.classList.contains('unread')) {
                        fetch(`/api/Notification/${notificationId}/MarkAsRead`, {
                            method: 'POST'
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // If there's a related URL, navigate to it
                                if (relatedUrl) {
                                    window.location.href = relatedUrl;
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error marking notification as read:', error);
                            
                            // Still navigate even if the API call fails
                            if (relatedUrl) {
                                window.location.href = relatedUrl;
                            }
                        });
                    } else if (relatedUrl) {
                        // If it's already read and has a URL, just navigate
                        window.location.href = relatedUrl;
                    }
                });
            });
            
            // Pagination functionality
            function setupPagination() {
                const notificationList = document.getElementById('notificationList');
                const items = notificationList.querySelectorAll('.notification-item');
                const paginationContainer = document.getElementById('paginationContainer');
                const paginationInfo = document.getElementById('paginationInfo');
                
                // If fewer than 10 items or no pagination container, don't paginate
                if (items.length <= 10 || !paginationContainer) return;
                
                const itemsPerPage = 10;
                const pageCount = Math.ceil(items.length / itemsPerPage);
                let currentPage = 1;
                
                // Create pagination DOM elements
                const prevPageBtn = document.getElementById('prevPage');
                const nextPageBtn = document.getElementById('nextPage');
                const paginationNumbers = document.getElementById('paginationNumbers');
                
                // Create pagination number buttons
                createPaginationNumbers();
                
                // Initialize page display
                setPage(1);
                
                // Navigation event listeners
                prevPageBtn.addEventListener('click', () => {
                    if (currentPage > 1) {
                        setPage(currentPage - 1);
                    }
                });
                
                nextPageBtn.addEventListener('click', () => {
                    if (currentPage < pageCount) {
                        setPage(currentPage + 1);
                    }
                });
                
                // Create pagination number buttons
                function createPaginationNumbers() {
                    paginationNumbers.innerHTML = '';
                    
                    // Only show up to 5 page buttons at a time
                    const maxVisibleButtons = 5;
                    let startPage = Math.max(1, currentPage - Math.floor(maxVisibleButtons / 2));
                    let endPage = Math.min(pageCount, startPage + maxVisibleButtons - 1);
                    
                    // Adjust start page if we're near the end
                    if (endPage - startPage + 1 < maxVisibleButtons) {
                        startPage = Math.max(1, endPage - maxVisibleButtons + 1);
                    }
                    
                    for (let i = startPage; i <= endPage; i++) {
                        const pageBtn = document.createElement('button');
                        pageBtn.className = 'pagination-button' + (i === currentPage ? ' active' : '');
                        pageBtn.textContent = i;
                        pageBtn.addEventListener('click', () => setPage(i));
                        paginationNumbers.appendChild(pageBtn);
                    }
                }
                
                // Set current page and update UI
                function setPage(page) {
                    currentPage = page;
                    
                    // Hide all items
                    items.forEach(item => {
                        item.style.display = 'none';
                    });
                    
                    // Show items for current page
                    const startIndex = (page - 1) * itemsPerPage;
                    const endIndex = Math.min(startIndex + itemsPerPage, items.length);
                    
                    for (let i = startIndex; i < endIndex; i++) {
                        items[i].style.display = 'flex';
                    }
                    
                    // Update pagination info text
                    if (paginationInfo) {
                        paginationInfo.textContent = `Showing ${startIndex + 1}-${endIndex} of ${items.length} notifications`;
                    }
                    
                    // Update button states
                    prevPageBtn.disabled = page === 1;
                    nextPageBtn.disabled = page === pageCount;
                    
                    // Recreate pagination numbers to highlight current page
                    createPaginationNumbers();
                }
            }
        });
    </script>
} 